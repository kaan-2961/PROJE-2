import numpy as np
from math import radians, sin, cos, sqrt, atan2
import random
import elkai
from sklearn.cluster import KMeans
from typing import List, Tuple
from ortools.linear_solver import pywraplp

class ClusterManager:
    def __init__(self, coordinates, k):
        self.coordinates = coordinates
        self.k = k
        self.clusters = {}  # Stores clusters by method name
        self.cluster_methods = {}  # Maps method names to clustering functions

    def add_clustering_method(self, method_name, clustering_function):
        """Add a clustering method to the manager."""
        self.cluster_methods[method_name] = clustering_function

    def run_clustering(self, method_name, **kwargs):
        """Run a specific clustering method and store the results."""
        if method_name not in self.cluster_methods:
            raise ValueError(f"Clustering method '{method_name}' not found.")

        clustering_function = self.cluster_methods[method_name]
        clusters = clustering_function(self.coordinates, **kwargs)
        self.clusters[method_name] = {f"{method_name}_cluster_{i+1}": cluster for i, cluster in enumerate(clusters)}

    def calculate_route_time(self, cluster_points, speed_km_per_hr, service_time_hr):
        """Calculate the total time for a given cluster."""
        depot = cluster_points[0]
        total_time = calculate_cluster_time(cluster_points, depot, speed_km_per_hr, service_time_hr)
        return total_time

    def get_all_clusters_with_methods(self, speed_km_per_hr, service_time_hr):
        """Retrieve all clusters with their methods, IDs, points, and costs."""
        all_clusters = []
        for method_name, clusters in self.clusters.items():
            for cluster_id, cluster_points in clusters.items():
                all_clusters.append({
                    "method": method_name,
                    "cluster_id": cluster_id,
                    "points": cluster_points,
                    "cost": self.calculate_route_time(cluster_points, speed_km_per_hr, service_time_hr)
                })
        return all_clusters

# Haversine distance function
def haversine(coord1: Tuple[float, float], coord2: Tuple[float, float]) -> float:
    R = 6371.0
    lat1, lon1 = radians(coord1[0]), radians(coord1[1])
    lat2, lon2 = radians(coord2[0]), radians(coord2[1])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    return R * c

def calculate_cluster_time(cluster: List[Tuple[float, float]], depot: Tuple[float, float], speed_km_per_hr: float, service_time_hr: float) -> float:
    if len(cluster) <= 2:
        # If the cluster is too small, just calculate the distance between the points
        total_distance = haversine(cluster[0], cluster[1]) if len(cluster) == 2 else 0.0
        travel_time = total_distance / speed_km_per_hr
        total_service_time = (len(cluster) - 1) * service_time_hr  # Exclude depot
        total_time = travel_time + total_service_time
        return total_time

    distance_matrix = []
    for i in range(len(cluster)):
        row = []
        for j in range(len(cluster)):
            row.append(haversine(cluster[i], cluster[j]))
        distance_matrix.append(row)

    # Convert distance matrix to integers for elkai
    int_distance_matrix = [[int(dist * 1000) for dist in row] for row in distance_matrix]

    route = elkai.solve_int_matrix(int_distance_matrix)
    total_distance = 0.0
    for i in range(len(route) - 1):
        total_distance += distance_matrix[route[i]][route[i + 1]]
    total_distance += distance_matrix[route[-1]][route[0]]

    travel_time = total_distance / speed_km_per_hr
    total_service_time = (len(cluster) - 1) * service_time_hr  # Exclude depot
    total_time = travel_time + total_service_time
    return total_time

# Nearest neighbor clustering with time constraint
def nearest_neighbor_clustering(coords: List[Tuple[float, float]], speed_km_per_hr: float, service_time_hr: float, tmax: float) -> List[List[Tuple[float, float]]]:
    depot = coords[0]
    coords = coords[1:]
    n = len(coords)
    clusters = []
    visited = set()

    while len(visited) < n:
        unvisited = [i for i in range(n) if i not in visited]
        if not unvisited:
            break

        start_point = random.choice(unvisited)
        cluster = [depot, coords[start_point]]
        visited.add(start_point)

        while True:
            nearest_point = None
            min_distance = float('inf')

            for i in range(n):
                if i not in visited:
                    distance = haversine(cluster[-1], coords[i])
                    if distance < min_distance:
                        min_distance = distance
                        nearest_point = i

            if nearest_point is not None:
                temp_cluster = cluster + [coords[nearest_point]]
                total_time = calculate_cluster_time(temp_cluster, depot, speed_km_per_hr, service_time_hr)

                if total_time <= tmax:
                    cluster.append(coords[nearest_point])
                    visited.add(nearest_point)
                else:
                    break
            else:
                break

        cluster.append(depot)
        clusters.append(cluster)

    return clusters

def randomized_nearest_neighbor_clustering(coords: List[Tuple[float, float]], speed_km_per_hr: float, service_time_hr: float, tmax: float, k: int = 3) -> List[List[Tuple[float, float]]]:
    depot = coords[0]
    coords = coords[1:]
    n = len(coords)
    clusters = []
    visited = set()

    while len(visited) < n:
        unvisited = [i for i in range(n) if i not in visited]
        if not unvisited:
            break

        start_point = random.choice(unvisited)
        cluster = [depot, coords[start_point]]
        visited.add(start_point)

        while True:
            distances = []
            for i in range(n):
                if i not in visited:
                    distance = haversine(cluster[-1], coords[i])
                    distances.append((distance, i))

            if not distances:
                break

            distances.sort()
            k_nearest = [i for (_, i) in distances[:k]]
            nearest_point = random.choice(k_nearest)

            temp_cluster = cluster + [coords[nearest_point]]
            total_time = calculate_cluster_time(temp_cluster, depot, speed_km_per_hr, service_time_hr)

            if total_time <= tmax:
                cluster.append(coords[nearest_point])
                visited.add(nearest_point)
            else:
                break

        cluster.append(depot)
        clusters.append(cluster)

    return clusters

def recluster_problematic_clusters(clusters: List[List[Tuple[float, float]]], depot: Tuple[float, float], speed_km_per_hr: float, service_time_hr: float, tmax: float) -> List[List[Tuple[float, float]]]:
    new_clusters = []
    for cluster in clusters:
        total_time = calculate_cluster_time(cluster, depot, speed_km_per_hr, service_time_hr)

        if total_time <= tmax:
            new_clusters.append(cluster)
        else:
            kmeans = KMeans(n_clusters=2, random_state=42)
            coords = np.array(cluster)
            labels = kmeans.fit_predict(coords)

            cluster1 = coords[labels == 0].tolist()
            cluster2 = coords[labels == 1].tolist()

            cluster1.insert(0, depot)
            cluster2.insert(0, depot)

            reclustered = recluster_problematic_clusters([cluster1, cluster2], depot, speed_km_per_hr, service_time_hr, tmax)
            new_clusters.extend(reclustered)

    return new_clusters

def kmeans_clustering_with_constraint(
    customers: List[Tuple[float, float]],
    depot: Tuple[float, float],
    speed_km_per_hr: float,
    service_time_hr: float,
    tmax: float,
    initial_k: int = 20
) -> List[List[Tuple[float, float]]]:

    # Edge case
    if not customers:
        return []

    n = len(customers)
    k = min(initial_k, n)
    coords = np.array(customers)

    # 1) Run KMeans on customers only
    labels = KMeans(n_clusters=k, random_state=42).fit_predict(coords)

    # 2) Build tours and recursively split oversized ones
    final_clusters = []
    for i in range(k):
        cluster_customers = coords[labels == i].tolist()
        if not cluster_customers:
            continue

        tour = [depot] + cluster_customers + [depot]
        final_clusters.extend(
            _recluster_if_needed(tour, depot, speed_km_per_hr, service_time_hr, tmax)
        )

    return final_clusters
def enforce_unique_assignment(
    tours: List[List[Tuple[float, float]]],
    depot: Tuple[float, float],
    speed_km_per_hr: float,
    service_time_hr: float,
    tmax: float
) -> List[List[Tuple[float, float]]]:
    point_to_tours = {}
    for idx, tour in enumerate(tours):
        for cust in tour[1:-1]:
            point_to_tours.setdefault(tuple(cust), []).append(idx)

    tours = [list(t) for t in tours]

    for pt, idxs in point_to_tours.items():
        if len(idxs) <= 1:
            continue

        # Remove pt from every candidate tour
        for i in idxs:
            tours[i] = [depot] + [c for c in tours[i][1:-1] if tuple(c) != pt] + [depot]

        # Reâ€‘insert into the single best tour
        best_idx, best_diff = None, float('inf')
        for i in idxs:
            candidate = tours[i][1:-1] + [list(pt)]
            cost = calculate_cluster_time([depot] + candidate + [depot], depot, speed_km_per_hr, service_time_hr)
            diff = abs(tmax - cost)
            if diff < best_diff:
                best_diff, best_idx = diff, i

        tours[best_idx] = [depot] + tours[best_idx][1:-1] + [list(pt)] + [depot]

    return [tour for tour in tours if len(tour) > 2]


def _recluster_if_needed(
    tour: List[Tuple[float, float]],
    depot: Tuple[float, float],
    speed: float,
    service: float,
    tmax: float
) -> List[List[Tuple[float, float]]]:
    """Split tour into two if it violates tmax, otherwise return it."""
    total_time = calculate_cluster_time(tour, depot, speed, service)
    if total_time <= tmax or len(tour) <= 3:
        return [tour]

    # Remove depot endpoints for splitting
    customers = tour[1:-1]
    coords = np.array(customers)
    labels = KMeans(n_clusters=2, random_state=42).fit_predict(coords)

    clusters = []
    for label in (0, 1):
        subset = [customers[i] for i in range(len(customers)) if labels[i] == label]
        new_tour = [depot] + subset + [depot]
        clusters.extend(_recluster_if_needed(new_tour, depot, speed, service, tmax))

    return clusters

# Example usage
coordinates = [[41.019734, 28.81971], [41.02602, 28.82905], [41.03434, 28.8332], [41.03234, 28.82719], [41.04208, 28.82851], [41.02782, 28.8291], [41.0302, 28.82899], [41.03576, 28.82673], [41.04016, 28.82502], [41.03634, 28.83274], [41.03608, 28.83282], [41.03487, 28.82285], [41.0396, 28.82519], [41.02895, 28.82572], [41.01078, 28.82474], [41.00199, 28.83423], [40.99878, 28.83053], [41.00227, 28.83577], [41.00326, 28.83072], [41.00881, 28.83086], [41.00262, 28.8305], [41.00576, 28.82782], [40.99799, 28.83085], [41.00297, 28.83599], [41.00817, 28.8329], [41.00317, 28.83063], [41.00213, 28.83393], [41.0077, 28.81984], [41.00279, 28.83604], [40.9979, 28.83468], [41.01119, 28.82867], [41.00815, 28.85395], [41.00512, 28.8441], [41.00361, 28.85223], [41.00987, 28.85501], [41.00577, 28.8445], [41.00567, 28.84485], [41.00678, 28.85301], [40.99758, 28.84846], [41.00853, 28.84895], [40.99942, 28.84662], [41.00515, 28.84431], [41.00864, 28.8496], [41.00686, 28.84714], [40.99917, 28.85226], [41.00649, 28.84896], [41.03067, 28.83867], [41.0405, 28.84485], [41.02657, 28.83591], [41.03921, 28.84449], [41.02525, 28.83666], [41.03086, 28.84659], [41.0306, 28.83904], [41.03525, 28.84121], [41.04506, 28.83714], [41.04448, 28.83297], [41.03153, 28.84416], [41.04364, 28.84111], [41.03075, 28.83783], [41.0549, 28.82542], [41.04814, 28.82217], [41.046, 28.85154], [41.05421, 28.84883], [41.05672, 28.84225], [41.04435, 28.82023], [41.0544, 28.84569], [41.04434, 28.81931], [41.10403, 28.86451], [41.04713, 28.85006], [41.05089, 28.84942], [41.04835, 28.85265], [41.05419, 28.83518], [41.03983, 28.81678], [41.06019, 28.83569], [41.00878, 28.87152], [41.00549, 28.88701], [41.00664, 28.86902], [41.01079, 28.87049], [41.00642, 28.87068], [41.0155, 28.87553], [41.01081, 28.86759], [41.00577, 28.86982], [40.99978, 28.8703], [41.00447, 28.88763], [41.00636, 28.88403], [41.00687, 28.86951], [41.09623, 28.78814], [41.09623, 28.7909], [41.08429, 28.77111], [41.10239, 28.78701], [41.09484, 28.77081], [41.10226, 28.78703], [41.0951, 28.77448], [41.10127, 28.78728], [41.09858, 28.76646], [41.02142, 28.83977], [41.11218, 28.78581], [41.10364, 28.79214], [41.10162, 28.76818], [41.09398, 28.775], [41.06501, 28.79226], [41.11199, 28.78498], [41.03396, 28.79644], [41.03777, 28.79811], [41.03354, 28.77447], [41.0357, 28.78919], [41.03783, 28.7983], [41.03664, 28.78836], [41.03355, 28.80022], [41.0327, 28.80025], [41.03337, 28.80022], [41.03386, 28.80313], [41.03783, 28.79847], [41.03703, 28.78402], [41.03311, 28.79984], [41.04559, 28.78274], [41.04362, 28.78395], [41.03544, 28.79396], [41.0511, 28.79667], [41.05471, 28.79464], [41.05481, 28.79922], [41.05732, 28.80775], [41.05702, 28.80761], [41.05296, 28.80591], [41.05771, 28.80125], [41.06106, 28.80147], [41.05203, 28.79875], [41.05811, 28.79877], [41.04828, 28.8008], [41.05404, 28.79501], [41.11479, 28.81034], [41.09347, 28.80551], [41.11022, 28.80399], [41.10704, 28.78471], [41.09056, 28.81102], [41.10078, 28.81058], [41.11002, 28.80115], [41.10493, 28.80379], [41.09743, 28.80579], [41.12019, 28.80717], [41.10651, 28.78756], [41.10802, 28.78975], [41.10679, 28.80359], [41.12037, 28.80708], [41.10879, 28.78689], [41.10855, 28.80333], [40.97926, 28.85509], [40.9774, 28.87706], [40.97766, 28.87685], [40.97926, 28.8551], [40.97849, 28.87509], [40.97914, 28.87355], [40.97869, 28.87964], [40.97806, 28.87267], [40.97829, 28.87212], [40.97769, 28.8769], [40.97892, 28.87213], [40.97966, 28.87484], [40.97819, 28.87171], [40.99183, 28.83519], [40.98249, 28.87297], [40.99384, 28.86665], [40.99214, 28.86988], [40.98732, 28.86599], [40.98754, 28.8661], [40.98105, 28.87006], [40.9868, 28.86887], [40.98232, 28.87126], [41.11845, 28.77374], [41.11283, 28.76782], [41.11711, 28.77373], [41.11968, 28.76789], [41.13167, 28.78009], [41.11739, 28.77048], [41.12238, 28.7703], [41.11923, 28.76654], [41.11711, 28.77347], [41.12275, 28.77961], [41.12251, 28.77141], [41.1262, 28.77207], [41.1227, 28.77899], [41.12066, 28.7683], [41.02245, 28.83912], [41.01965, 28.82418], [41.02255, 28.8392], [41.01776, 28.84158], [41.01837, 28.83188], [41.02941, 28.85426], [41.0241, 28.85692], [41.01818, 28.83243], [41.01485, 28.84199], [41.03148, 28.85003], [41.01786, 28.82593], [41.01465, 28.83501], [41.04873, 28.84436], [41.01433, 28.83542], [41.0169, 28.84888], [41.04775, 28.84593], [41.01456, 28.83531], [41.04588, 28.84645], [41.04919, 28.83479], [41.04896, 28.83851], [40.98085, 28.79397], [40.98951, 28.79653], [40.96996, 28.79621], [40.96421, 28.83819], [40.95972, 28.81973], [40.95922, 28.83478], [40.98526, 28.79617], [40.98056, 28.79331], [40.9597, 28.82166], [40.96167, 28.82469], [40.95851, 28.82128], [40.96392, 28.83777], [40.96379, 28.83763], [40.97981, 28.79449], [41.00128, 28.77555], [40.99954, 28.78], [40.99861, 28.78637], [40.99498, 28.7912], [40.99323, 28.76885], [40.99393, 28.79101], [40.9906, 28.77146], [40.99824, 28.76625], [41.00056, 28.79316], [40.99404, 28.76789], [40.99699, 28.77676], [41.00121, 28.79735], [40.99368, 28.79092], [40.99928, 28.78542], [40.99659, 28.77578], [40.99812, 28.77808], [40.99623, 28.79155], [40.99713, 28.77644], [41.04447, 28.76268], [41.05557, 28.78605], [41.05492, 28.79224], [41.04043, 28.7706], [41.05556, 28.7642], [41.05662, 28.79019], [41.0578, 28.77666], [41.05543, 28.76125], [41.05458, 28.7911], [41.05471, 28.76214], [40.98635, 28.61674], [41.00192, 28.78634], [41.00251, 28.78824], [41.01079, 28.79847], [41.0095, 28.80104], [41.0061, 28.79811], [41.0242, 28.80073], [41.02653, 28.79636], [41.00336, 28.79283], [41.0091, 28.79973], [41.00481, 28.79416], [41.00267, 28.78858], [41.00673, 28.79858], [41.00241, 28.79292], [41.01, 28.77869], [41.02842, 28.7753], [41.01113, 28.77649], [41.01752, 28.78528], [41.01749, 28.78498], [41.01366, 28.78738], [41.02004, 28.78652], [41.00998, 28.7747], [41.01749, 28.78521], [41.02173, 28.78627], [41.02058, 28.79162], [41.04183, 28.86832], [41.05047, 28.85793], [41.04836, 28.85967], [41.04187, 28.871], [41.02691, 28.86514], [41.03808, 28.85012], [41.04339, 28.86287], [41.04322, 28.85001], [41.03858, 28.87124], [41.10249, 28.76225], [41.08194, 28.75223], [41.08665, 28.75115], [41.0777, 28.75076], [41.07301, 28.74893], [41.07434, 28.75195], [41.08682, 28.75241], [41.06846, 28.753], [41.10159, 28.76215], [40.98183, 28.87632], [40.99018, 28.87662], [40.99791, 28.86503], [40.99727, 28.86732], [40.98886, 28.87139], [40.99205, 28.88238], [40.99069, 28.88239], [40.99365, 28.87432], [40.9848, 28.87811], [40.99716, 28.87291], [40.99597, 28.87042], [40.99054, 28.87073], [41.02978, 28.86965], [41.03493, 28.8549], [41.03605, 28.86014], [41.03007, 28.86985], [41.03481, 28.8553], [41.02716, 28.87245], [41.02845, 28.86527], [41.03296, 28.86349], [41.03083, 28.86966], [41.03947, 28.85785], [41.03351, 28.86174], [41.03467, 28.86679], [41.02575, 28.86134], [41.04027, 28.8593], [41.03668, 28.85772], [41.03421, 28.85995], [40.99913, 28.8387], [41.00317, 28.84295], [40.99977, 28.84421], [41.01183, 28.83889], [41.0084, 28.84147], [40.99227, 28.84081], [40.99451, 28.84576], [41.00304, 28.84291], [40.99266, 28.8456], [41.01148, 28.83453], [41.00671, 28.84161], [40.98804, 28.78032], [41.00023, 28.79721], [40.98884, 28.78093], [40.99639, 28.77529], [40.99363, 28.77587], [40.98919, 28.78033], [40.98986, 28.7864], [40.99277, 28.78173], [40.98679, 28.78414], [40.99068, 28.78592], [40.99995, 28.79734], [40.99197, 28.77848], [41.00214, 28.77796], [40.99197, 28.78394], [40.98655, 28.78256], [40.99093, 28.78424], [40.99939, 28.79783], [41.03067, 28.87929], [41.03563, 28.88602], [41.02525, 28.87271], [41.03343, 28.88799], [41.03381, 28.88571], [41.03773, 28.87727], [41.0297, 28.89694], [41.03522, 28.88561], [41.02721, 28.86959], [41.02693, 28.88161], [41.03547, 28.87944], [41.0319, 28.87701], [41.01419, 28.85722], [41.00726, 28.86092], [41.01199, 28.86254], [41.00844, 28.85911], [41.00108, 28.85698], [41.01281, 28.85876], [41.00141, 28.85514], [41.00201, 28.86023], [41.0052, 28.85914], [41.0139, 28.86057], [41.0079, 28.86406], [41.01127, 28.86132], [40.99957, 28.85926], [41.00348, 28.85935], [40.99959, 28.85742], [41.0218, 28.85616], [41.02042, 28.85999], [41.01426, 28.8696], [41.01609, 28.86127], [41.01383, 28.86356], [41.01411, 28.86328], [41.01662, 28.86256], [41.02024, 28.85869], [41.01427, 28.86499], [41.01671, 28.86888], [41.01446, 28.86503], [41.01715, 28.86044], [41.0407, 28.88142], [41.04424, 28.87849], [41.05024, 28.8604], [41.04128, 28.88248], [41.04649, 28.87338], [41.04569, 28.88007], [41.0392, 28.87739], [41.04512, 28.82214], [41.04211, 28.87758], [41.04522, 28.87827], [41.04513, 28.82206], [41.04395, 28.87964], [41.04229, 28.87845], [41.02373, 28.86803], [41.02145, 28.87067], [41.02417, 28.87289], [41.01933, 28.88011], [41.01944, 28.89975], [41.02107, 28.87962], [41.02015, 28.87892], [41.01452, 28.88337], [41.01604, 28.89648], [41.02155, 28.87041], [41.01953, 28.87462], [41.01578, 28.8777], [40.98155, 28.85016], [40.99788, 28.85626], [40.98465, 28.84658], [40.9941, 28.85229], [40.99704, 28.85532], [40.99581, 28.85401], [40.99581, 28.85402], [40.99726, 28.85566], [40.99382, 28.85224], [41.00982, 28.81493], [40.9853, 28.83361], [40.99881, 28.88644], [41.03779, 28.83134], [41.06612, 28.82475], [41.03997, 28.81039], [41.04759, 28.80988], [41.01998, 28.87665], [41.11681, 28.83126], [41.01458, 28.78814], [40.98077, 28.87255], [41.0361, 28.68827], [41.01417, 28.71092], [41.03066, 28.72167], [41.05343, 28.8045], [41.02076, 28.72487], [41.04587, 28.69135], [40.97479, 28.66848], [40.98602, 28.84858], [40.99121, 28.71652], [41.10092, 28.76554], [40.99642, 28.76343], [40.99523, 28.8223], [41.00734, 28.65343], [41.08801, 28.67527], [41.01137, 28.65877], [40.97867, 28.72222], [41.07046, 28.81202], [40.98326, 28.83224], [41.07466, 28.69945], [41.03724, 28.88269], [40.99731, 28.79885], [41.02903, 28.72318], [41.11434, 28.69048], [40.98106, 28.75292], [41.09789, 28.62269], [41.11992, 28.68981], [41.10437, 28.6463], [41.10205, 28.84658], [40.97969, 28.73691], [41.04962, 28.80383], [41.09605, 28.62633], [41.00101, 28.82325], [41.01501, 28.64135], [41.02512, 28.77927], [40.96373, 28.68069], [40.99305, 28.69941], [41.04557, 28.812], [41.05686, 28.66251], [41.01017, 28.66977], [41.08919, 28.75226], [40.97045, 28.66284], [41.00007, 28.89617], [40.98216, 28.81], [41.12513, 28.7128], [40.98929, 28.72949], [41.01892, 28.66944], [41.04551, 28.73838], [41.07749, 28.72405], [41.02858, 28.63636], [41.05142, 28.80166], [41.07357, 28.84375], [41.0544, 28.82886], [41.08567, 28.71516], [40.97325, 28.61864], [41.09676, 28.66188], [41.00406, 28.71814], [41.01932, 28.64236], [41.07715, 28.74834], [40.99856, 28.6198], [41.0021, 28.6737], [41.04403, 28.71744], [41.12732, 28.85585], [41.02989, 28.89667], [41.00563, 28.70558], [41.07153, 28.66222], [40.9795, 28.61791], [41.03311, 28.76465], [41.09013, 28.74396], [41.04562, 28.73616], [40.9705, 28.7565], [41.12198, 28.77432], [41.0955, 28.72072], [41.10845, 28.76371], [41.07165, 28.64601], [41.07353, 28.84973], [41.00529, 28.70673], [41.05061, 28.87272], [40.96253, 28.75477], [40.99135, 28.73724], [40.99914, 28.89207], [41.08149, 28.87583], [41.02062, 28.7628], [40.96401, 28.71434], [41.08013, 28.78865], [40.98316, 28.89073], [41.05071, 28.65525], [41.09585, 28.62149], [41.02331, 28.75978], [41.11379, 28.64323], [41.12707, 28.77984], [41.09532, 28.72733], [40.99302, 28.70748], [41.04005, 28.63985], [41.02233, 28.70473], [41.07046, 28.78278], [41.11462, 28.85893], [41.05501, 28.7825], [40.97556, 28.63159], [41.08695, 28.70915], [40.9597, 28.80404], [40.96397, 28.67686], [41.0174, 28.63997], [41.08614, 28.74707], [41.10717, 28.805], [41.00531, 28.79627], [41.12099, 28.63326], [41.08743, 28.78595], [41.07439, 28.71441], [41.13115, 28.64212], [40.98289, 28.84158], [41.05678, 28.75907], [41.11459, 28.69606], [41.00765, 28.79826], [41.03453, 28.62465], [41.12042, 28.83709], [41.07974, 28.83921], [40.97369, 28.70749], [41.05732, 28.86511], [40.96806, 28.78975], [40.97714, 28.8301], [40.98455, 28.85194], [41.07664, 28.73259], [41.10946, 28.76925], [41.05193, 28.87512], [41.03171, 28.89433], [41.11319, 28.84019], [41.03867, 28.7439], [41.11042, 28.64836], [41.08218, 28.67581], [40.9862, 28.84554], [41.05692, 28.80815], [41.10925, 28.63896], [40.9921, 28.74449], [41.04413, 28.86334], [41.12096, 28.83029], [41.11182, 28.65692], [41.05214, 28.63494], [41.01293, 28.69985], [41.0001, 28.72319], [40.95998, 28.78669], [41.04134, 28.68263], [41.02155, 28.71017], [41.06072, 28.70341], [41.08821, 28.72041], [41.0143, 28.8504], [41.11266, 28.64615], [40.97692, 28.66109], [41.12517, 28.843], [41.03357, 28.84884], [40.99919, 28.86836], [41.10679, 28.70715], [40.98144, 28.78928], [41.0165, 28.75493], [41.03616, 28.75876], [41.04403, 28.88414], [41.03194, 28.74401], [41.01718, 28.82756], [41.0419, 28.64369], [41.00456, 28.88294], [41.00295, 28.72012], [41.05512, 28.75771], [41.08309, 28.80291], [41.08576, 28.77019], [41.07278, 28.82756], [41.07349, 28.83077], [41.01921, 28.63737], [41.12385, 28.65458], [40.98855, 28.63175], [41.03655, 28.79185], [40.99066, 28.81373], [41.11891, 28.63402], [41.02437, 28.69215], [40.96299, 28.71471], [40.96795, 28.6762], [40.9744, 28.78474], [41.01056, 28.61883], [41.05196, 28.64993], [40.96413, 28.87813], [41.07385, 28.69505], [41.12204, 28.67526], [41.07956, 28.66184], [41.07147, 28.70734], [41.0734, 28.65064], [40.99462, 28.66149], [40.96205, 28.68188], [41.12552, 28.6513], [40.99563, 28.66687], [41.05423, 28.62834], [41.05474, 28.69483], [41.04863, 28.71577], [40.96041, 28.73467], [40.9805, 28.63919], [41.0369, 28.70389], [41.125, 28.63065], [41.09999, 28.70113], [41.07188, 28.85727], [41.09752, 28.78573], [41.04264, 28.81315], [41.02696, 28.63578], [40.96077, 28.67105], [41.05159, 28.64365], [41.12, 28.71334], [41.06269, 28.84445], [41.07415, 28.89511], [40.9969, 28.64154], [41.0704, 28.69972], [41.01755, 28.65381], [41.09206, 28.77403], [40.98793, 28.87234], [41.02054, 28.87995], [41.04616, 28.75353], [40.99588, 28.77569], [41.03219, 28.8895], [40.96934, 28.79754], [41.06972, 28.81652], [41.03255, 28.73404], [41.0441, 28.79177], [41.07285, 28.74094], [40.99783, 28.80005], [41.11467, 28.69936], [41.09387, 28.76986], [41.07412, 28.76357], [41.12258, 28.64249], [41.05774, 28.72315], [41.09434, 28.88488], [41.04072, 28.84824], [41.11896, 28.88029], [41.07061, 28.80916], [41.0361, 28.7273], [40.99296, 28.85315], [41.12274, 28.63988], [41.12319, 28.79599], [41.03299, 28.82817], [41.11071, 28.73741], [40.97295, 28.83332], [41.02314, 28.73817], [41.0334, 28.79241], [41.05686, 28.87765], [41.09251, 28.65999], [40.97163, 28.71005], [41.05344, 28.75848], [40.98137, 28.89965], [40.97716, 28.77999], [41.08414, 28.6438], [40.97649, 28.73193], [41.08885, 28.86799], [41.0262, 28.61849], [40.96926, 28.84206], [41.05301, 28.81264], [40.96903, 28.65241], [41.04435, 28.82695], [41.01558, 28.62745], [41.00122, 28.83498], [41.11288, 28.70191], [41.06435, 28.77529], [41.05505, 28.71839], [40.97221, 28.72149], [41.05901, 28.75921], [41.07398, 28.63212], [41.05641, 28.62907], [40.99637, 28.63535], [40.96811, 28.74664], [41.0393, 28.89843], [40.96023, 28.85669], [41.10364, 28.81561], [40.96127, 28.85451], [41.01704, 28.70812], [41.05837, 28.82092], [41.02396, 28.78616], [41.10802, 28.81268], [41.10013, 28.62699], [41.06591, 28.78385], [41.04211, 28.7377], [40.99723, 28.6757], [41.03608, 28.82423], [41.04644, 28.88705], [41.09776, 28.80396], [40.98019, 28.88819], [40.99522, 28.8145], [40.98361, 28.81762], [41.08262, 28.81868], [41.11989, 28.82534], [41.03757, 28.8098], [40.96113, 28.80246], [41.12148, 28.63795], [40.96228, 28.68468], [41.00133, 28.68052], [41.07865, 28.63437], [41.11803, 28.77943], [41.11013, 28.70313], [40.99435, 28.64359], [40.96624, 28.62862], [41.01037, 28.72623], [40.99571, 28.87965], [40.99275, 28.83904], [41.06029, 28.76763], [41.01406, 28.81035], [40.97911, 28.72311], [41.1176, 28.65721], [41.03274, 28.64293], [41.12847, 28.76392], [41.11598, 28.85114], [41.04295, 28.88928], [40.98478, 28.79376], [41.1201, 28.75531], [40.97645, 28.72203], [41.02975, 28.74246], [40.97016, 28.7834], [41.12527, 28.80578], [41.09739, 28.77482], [41.01033, 28.78006], [41.08412, 28.63354], [41.10508, 28.8267], [41.04111, 28.78948], [40.97036, 28.68207], [41.0425, 28.84635], [41.00688, 28.75078], [41.02869, 28.77021], [41.08113, 28.62869], [41.0454, 28.85585], [41.08813, 28.72602], [41.1205, 28.88345], [41.04296, 28.88766], [40.99058, 28.6536], [41.00579, 28.64913], [40.97965, 28.89711], [40.97314, 28.73175], [41.09652, 28.62233], [40.96813, 28.70649], [40.97473, 28.66494], [41.00734, 28.69574], [41.08531, 28.64567], [41.0618, 28.74244], [41.10411, 28.81756], [41.07115, 28.64262], [41.10716, 28.66379], [41.04401, 28.76782], [41.08461, 28.69864], [41.08713, 28.79237], [41.04603, 28.81875], [41.04129, 28.87829], [41.05924, 28.81458], [41.10789, 28.81284], [41.01722, 28.84627], [41.11688, 28.80155], [41.13045, 28.71212], [40.96908, 28.63302], [41.12736, 28.88161], [41.1105, 28.65238], [41.04569, 28.72271], [40.96398, 28.6187], [41.01314, 28.6834], [41.03107, 28.70735], [41.0205, 28.70628], [41.09998, 28.87556], [41.08279, 28.72801], [40.95923, 28.77572], [41.12084, 28.77751], [41.05919, 28.84962], [41.04731, 28.7273], [41.01739, 28.75068], [41.09664, 28.84045], [41.04117, 28.76085], [41.00565, 28.81277], [40.97501, 28.86222], [41.05561, 28.73785], [41.0733, 28.66034], [40.98362, 28.79724], [41.0276, 28.89962], [41.06465, 28.628], [41.02288, 28.63082], [41.07517, 28.77453], [41.12474, 28.68938], [41.04617, 28.68863], [40.96852, 28.82354], [41.03183, 28.84399], [41.01667, 28.83316], [41.0102, 28.72705], [41.03421, 28.67805], [41.10522, 28.62281], [41.01587, 28.7405], [41.06768, 28.72907], [41.07803, 28.74611], [41.04426, 28.74095], [40.97789, 28.72397], [41.02935, 28.75482], [40.99348, 28.87093], [41.00994, 28.76977], [41.07946, 28.74292], [41.00919, 28.62756], [41.09964, 28.67652], [40.99555, 28.68371], [41.03641, 28.76953], [41.10965, 28.64506], [40.96472, 28.84956], [41.09934, 28.63544], [41.12186, 28.64002], [41.08154, 28.73665], [40.97316, 28.64542], [41.06055, 28.67763], [41.10481, 28.8987], [41.03117, 28.86823], [41.00976, 28.75853], [41.04463, 28.7466], [40.96253, 28.78431], [41.00971, 28.79737], [40.96401, 28.80383], [41.02852, 28.7795], [41.07154, 28.85952], [41.10535, 28.77077], [41.03714, 28.87814], [41.04381, 28.82646], [41.01815, 28.88099], [41.05578, 28.62048], [41.12452, 28.62343], [41.09205, 28.71582], [40.98454, 28.70182], [41.04037, 28.81708], [41.07179, 28.86568], [41.09591, 28.62586], [41.09803, 28.87552], [41.07226, 28.79455], [41.05768, 28.83836], [40.99665, 28.8723], [41.12689, 28.83865], [41.07921, 28.64884], [41.00845, 28.78255], [41.07839, 28.63041], [40.9591, 28.76428], [40.96452, 28.71256], [40.96935, 28.71694], [41.13025, 28.8782], [41.06211, 28.61692], [40.9851, 28.75853], [41.01276, 28.73505], [41.0551, 28.87727], [41.0593, 28.66468], [40.98755, 28.66772], [41.02459, 28.6717], [41.00006, 28.87787], [41.01735, 28.77514], [40.97611, 28.73041], [41.04172, 28.7104], [41.05739, 28.68962], [41.07229, 28.65363], [41.03556, 28.65595], [40.99686, 28.85241], [41.03326, 28.66359], [41.08938, 28.82754], [41.00437, 28.69859], [40.96643, 28.7678], [40.96047, 28.71769], [41.1027, 28.86685], [41.00896, 28.67515], [41.03088, 28.86777], [41.08548, 28.83659], [41.01134, 28.76647], [41.10146, 28.64123], [40.96827, 28.6357], [41.09658, 28.70984], [40.96887, 28.62194], [41.12653, 28.70118], [41.00599, 28.72406], [41.05953, 28.77919], [41.00171, 28.80209], [41.09683, 28.71198], [41.02799, 28.62856], [40.98337, 28.82114], [40.98268, 28.77185], [41.12508, 28.80745], [40.99869, 28.76112], [41.12322, 28.64078], [40.9658, 28.66324], [41.04605, 28.89664], [41.12379, 28.83536], [40.98541, 28.74441], [41.0301, 28.72953], [41.11643, 28.81908], [40.99693, 28.65034], [41.02433, 28.77884], [41.0978, 28.78115], [41.01673, 28.67292], [41.09814, 28.66063], [41.06499, 28.79165], [40.98356, 28.84355], [40.99672, 28.61933], [40.99151, 28.62914], [41.01525, 28.62664], [41.08328, 28.76445], [41.00252, 28.89264], [41.0029, 28.88547], [41.00832, 28.7555], [41.0091, 28.6229], [41.11983, 28.71872], [40.97547, 28.80125], [41.10864, 28.87659], [41.00985, 28.89666], [41.06939, 28.86716], [41.10413, 28.78024], [41.09876, 28.89823], [41.05958, 28.66878], [41.09044, 28.6441], [41.11131, 28.67548], [41.03225, 28.65023], [41.07814, 28.86866], [40.99483, 28.66743], [41.12543, 28.86553], [41.12662, 28.66256], [41.0631, 28.75371], [41.05235, 28.85523], [40.98135, 28.71629], [41.0038, 28.76741], [40.97755, 28.64674], [41.06755, 28.82516], [41.01496, 28.78834], [41.13038, 28.73568], [41.0407, 28.74444], [41.01674, 28.76186], [41.01498, 28.77728], [40.98854, 28.88924], [41.02931, 28.86133], [40.99888, 28.63179], [40.95972, 28.74822], [41.01911, 28.78466], [41.06484, 28.68464], [41.07735, 28.69096], [41.08881, 28.87945], [41.01796, 28.83398], [41.01734, 28.77089], [41.03062, 28.69818], [41.1253, 28.88656], [41.10463, 28.61756], [41.02318, 28.77359], [41.09457, 28.76664], [41.04379, 28.76906], [40.97461, 28.87117], [41.03891, 28.70627], [40.98018, 28.74059], [41.08104, 28.8649], [41.10137, 28.64725], [41.11445, 28.7378], [40.96284, 28.79068], [41.01748, 28.85751], [41.0299, 28.72317], [41.08009, 28.6859], [41.11486, 28.77], [41.01322, 28.71303], [41.11948, 28.75052], [40.98674, 28.68748], [41.11184, 28.75247], [41.07985, 28.66177], [41.04888, 28.80887], [41.05435, 28.87378], [41.06172, 28.72209], [41.07224, 28.66672], [41.12522, 28.63292], [41.039, 28.80139], [41.09021, 28.65233], [41.06798, 28.72925], [41.08047, 28.8746], [41.0073, 28.69131], [41.02926, 28.65095], [41.00007, 28.72509], [41.10276, 28.87213], [41.003, 28.75977], [40.95906, 28.67778], [41.01881, 28.8722], [40.9661, 28.65394], [41.10296, 28.81615], [40.98134, 28.66263], [41.07522, 28.62609], [40.9818, 28.83958], [40.9963, 28.83052], [41.05978, 28.74472], [41.03443, 28.8136], [41.11917, 28.65745], [41.07767, 28.69035], [41.08968, 28.69106], [41.00575, 28.8961], [40.99928, 28.66813], [41.02131, 28.76423], [41.04762, 28.82061], [41.00993, 28.73836], [41.11244, 28.64909], [40.95932, 28.78415], [41.08963, 28.82627], [41.05423, 28.76114], [41.05443, 28.85117], [40.98827, 28.66508], [41.12845, 28.67031], [40.9703, 28.83029], [40.95955, 28.8436], [41.09941, 28.80959], [40.99404, 28.78685], [41.02181, 28.88617], [41.04514, 28.86077], [41.03676, 28.71388], [41.0549, 28.76945], [41.0179, 28.66686], [41.12782, 28.706], [40.9625, 28.6348], [41.08569, 28.6761], [41.10699, 28.75395], [41.12563, 28.76733], [41.06593, 28.6195], [41.05046, 28.69159], [41.12487, 28.84543], [41.07976, 28.66668], [40.98725, 28.73408], [41.08465, 28.81894], [41.05923, 28.76777], [41.08756, 28.63392], [40.9792, 28.6982], [41.10498, 28.78678], [41.001, 28.88624], [41.04002, 28.69171], [41.01261, 28.75411], [40.99938, 28.88227], [41.11322, 28.69534], [40.96245, 28.76736], [40.97578, 28.79686], [41.10197, 28.8427], [41.0378, 28.88293], [41.07719, 28.6793], [41.07041, 28.71828], [41.06604, 28.72754], [41.07806, 28.76863], [41.08524, 28.73566], [40.99442, 28.82301], [41.06064, 28.75887], [41.08206, 28.81235], [41.05946, 28.66531], [40.97439, 28.65785], [40.98627, 28.7581], [40.97381, 28.62556], [41.05165, 28.78615], [41.04831, 28.74861], [41.08976, 28.87234], [41.00669, 28.83028], [41.04725, 28.8789], [41.00031, 28.69895], [41.00551, 28.67422], [41.02163, 28.88672], [40.96802, 28.8562], [41.02521, 28.81641], [40.96643, 28.89621], [41.02251, 28.65789], [40.98433, 28.82459], [40.97016, 28.75461], [41.01803, 28.68487], [41.08735, 28.7226], [41.10997, 28.6407], [41.00331, 28.67539], [41.06239, 28.77526], [41.04187, 28.63555], [41.12404, 28.62747], [40.99781, 28.68625], [41.1256, 28.86853], [40.99307, 28.62059], [41.0779, 28.67103], [40.99234, 28.77798], [40.98739, 28.79873], [41.12434, 28.65684], [41.08136, 28.85516], [41.09051, 28.70592], [40.98107, 28.69806], [40.97867, 28.70517], [40.99408, 28.6231], [41.05008, 28.88064], [41.0652, 28.80055], [41.071, 28.77865], [41.11646, 28.66389], [41.06001, 28.8423], [41.04953, 28.7564], [40.97099, 28.89776], [41.01536, 28.62182], [41.0783, 28.76289], [41.07871, 28.81449], [41.06176, 28.84672], [41.01347, 28.84634], [40.98399, 28.68118], [41.06507, 28.8193], [41.10278, 28.6325], [40.9932, 28.72647], [41.08277, 28.71073], [41.05392, 28.67952], [41.04951, 28.76028], [40.97225, 28.70888], [40.95896, 28.68432], [40.97832, 28.79935], [41.06974, 28.82124], [41.08328, 28.6301], [40.96824, 28.79624], [41.12179, 28.68056], [41.03422, 28.7358]]
speed_km_per_hr = 35.0
service_time_hr = 0.05
tmax = 3.0

# Initialize ClusterManager
cluster_manager = ClusterManager(coordinates, k=3)

# Add clustering methods
cluster_manager.add_clustering_method("nearest_neighbor", lambda coords, **kwargs: nearest_neighbor_clustering(coords, speed_km_per_hr, service_time_hr, tmax))
cluster_manager.add_clustering_method("randomized_nearest_neighbor", lambda coords, **kwargs: randomized_nearest_neighbor_clustering(coords, speed_km_per_hr, service_time_hr, tmax))
cluster_manager.add_clustering_method("kmeans", lambda coords, **kwargs: kmeans_clustering_with_constraint(coords[1:], coords[0], speed_km_per_hr, service_time_hr, tmax))

# Run clustering methods
cluster_manager.run_clustering("nearest_neighbor")
cluster_manager.run_clustering("randomized_nearest_neighbor")
cluster_manager.run_clustering("kmeans")

# Retrieve all clusters with methods and costs
all_clusters = cluster_manager.get_all_clusters_with_methods(speed_km_per_hr, service_time_hr)

# Print results
for cluster in all_clusters:
    print(f"Method: {cluster['method']}, Cluster ID: {cluster['cluster_id']}, Cost: {cluster['cost']:.2f} hours")
    print(f"Points: {cluster['points']}")
    print()

def optimal_set_covering(universe, sets):
    solver = pywraplp.Solver.CreateSolver('SCIP')
    if not solver:
        return None

    # Variables
    set_vars = [solver.BoolVar(f'set_{i}') for i in range(len(sets))]

    # Objective: Minimize the total cost of selected sets
    solver.Minimize(solver.Sum([sets[i]['cost'] * set_vars[i] for i in range(len(sets))]))

    # Constraints: Ensure every point in the universe is covered by at least one set
    point_indices = {tuple(point): idx for idx, point in enumerate(universe)}
    for point in universe:
        point_idx = point_indices[tuple(point)]
        covered_by = []
        for i, s in enumerate(sets):
            if list(point) in s['points']:
                covered_by.append(set_vars[i])
        solver.Add(solver.Sum(covered_by) >= 1)

    # Solve
    status = solver.Solve()

    if status == pywraplp.Solver.OPTIMAL:
        selected_sets = [sets[i] for i in range(len(sets)) if set_vars[i].solution_value() == 1]
        return selected_sets
    else:
        print("Optimal solution not found.")
        return None

# Extract universe
universe = []
for coord in coordinates:
    universe.append(coord)

# Call optimal set covering
optimal_clusters = optimal_set_covering(universe, all_clusters)

# Output final result
# After solving set covering:
if optimal_clusters:
    depot = coordinates[0]
    selected_tours = [cluster['points'] for cluster in optimal_clusters]

    # Enforce each point appears in exactly one tour
    unique_tours = enforce_unique_assignment(selected_tours, depot, speed_km_per_hr, service_time_hr, tmax)

    # Rebuild cluster dicts with updated costs
    final_clusters = []
    for i, tour in enumerate(unique_tours, start=1):
        cost = calculate_cluster_time(tour, depot, speed_km_per_hr, service_time_hr)
        final_clusters.append({
            "method": "set_covering_unique",
            "cluster_id": f"cluster_{i}",
            "points": tour,
            "cost": cost
        })
    
        
    # Print your deâ€‘duplicated result
    for cluster in final_clusters:
        print(f"Cluster ID: {cluster['cluster_id']}, Cost: {cluster['cost']:.2f} hours")
        print(cluster['points'])
        print()
else:
    print("No solution found.")
